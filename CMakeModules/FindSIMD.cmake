## Know the architecture of the CPU and set compile flags accordingly
set(TARGET_ARCHITECTURE "generic")
if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
   file(READ "/proc/cpuinfo" _cpuinfo)
   string(REGEX REPLACE ".*\nflags[ \t]*:[ \t]+([^\n]+).*" "\\1" _cpu_flags "${_cpuinfo}")
endif(CMAKE_SYSTEM_NAME STREQUAL "Linux")

string( TOLOWER "${VECTORIZED}" VECTORIZED )
message(STATUS "Vectorization status  " ${VECTORIZED} )

if(VECTORIZED STREQUAL "no")
  message(STATUS "Vectorization switched off by user  " )
else()
  if(VECTORIZED STREQUAL "yes")
    message(STATUS "Vectorization switched ON by user  " )
  else()
    message(STATUS "Vectorization is default (auto); built-in vectorization used but no code-selection (loop modification) done  " )
  endif()
  if(_cpu_flags MATCHES "avx2")
    set(TARGET_ARCHITECTURE "avx2")
    if(VECTORIZED STREQUAL "yes")
      add_definitions(-DVECTORIZATION="avx2")
    endif()
    if(CMAKE_Fortran_COMPILER_ID MATCHES "Intel")
      list(APPEND Fortran_FLAGS "-xCORE-AVX2")
    else()
      list(APPEND Fortran_FLAGS "-march=native")
    endif()
  elseif(_cpu_flags MATCHES "avx512")
    set(TARGET_ARCHITECTURE "avx512")
    if(VECTORIZED STREQUAL "yes")
      add_definitions(-DVECTORIZATION="avx512")
    endif()
    if(CMAKE_Fortran_COMPILER_ID MATCHES "Intel")
      list(APPEND Fortran_FLAGS "-xCORE-AVX512")
    else()
      list(APPEND Fortran_FLAGS "-march=native")
    endif()
  endif()
endif()
unset(VECTORIZED CACHE)

add_definitions(-DTARGET_ARCHITECTURE=\"${TARGET_ARCHITECTURE}\")
