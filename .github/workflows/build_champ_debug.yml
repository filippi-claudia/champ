name: DEBUG build and testing

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      tags:
        description: 'Test tags (default: short)'
        default: "short"

jobs:
  debug_build_test_champ:
    name: Buid Champ and run tests with ${{ matrix.toolchain }} in DEBUG mode
    runs-on: self-hosted
    timeout-minutes: 200
    strategy: 
      matrix:
        toolchain: ['intel','gnu']
      fail-fast: false
    defaults:
      run:
        shell: bash --noprofile --norc {0}
    steps:
    - uses: actions/checkout@v2
# Only necessary in github environment, not ccp runner
#    - name: setup repo
#      if: matrix.toolchain == 'intel'
#      run: |
#        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
#        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
#        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
#        sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"
#        sudo apt-get update
#
#    - name: Install Cmake and HDF5
#      run: |
#        sudo apt-get install -y cmake
#        sudo apt-get install -y libhdf5-serial-dev
#
#    - name: Install GNU compilers and libraries
#      if: matrix.toolchain == 'gnu'
#      run: |
#           sudo apt install -y gfortran
#           sudo apt install -y openmpi-bin
#           sudo apt install -y libopenmpi-dev
#           sudo apt install -y gawk
#           sudo apt install -y libblacs-mpi-dev
#           sudo apt install -y liblapack-dev
#           gawk --version
#           mpirun --version
#           gfortran --version
#
#    - name: install Intel oneapi components
#      if: matrix.toolchain == 'intel'
#      run: |
#        sudo apt-get install -y intel-oneapi-common-vars
#        sudo apt-get install -y intel-oneapi-compiler-fortran-2021.3.0
#        sudo apt-get install -y intel-oneapi-mkl-2021.3.0
#        sudo apt-get install -y intel-oneapi-mkl-devel-2021.3.0
#        sudo apt-get install -y intel-oneapi-mpi-2021.3.0
#        sudo apt-get install -y intel-oneapi-mpi-devel-2021.3.0

#    - name: Install Trexio
#      run: |
#        sudo apt-get install -y cmake
#        sudo apt-get install -y libhdf5-serial-dev
#        sudo apt-get install -y gfortran
#        sudo apt-get install -y gcc
#        wget https://github.com/TREX-CoE/trexio/releases/download/v1.0/trexio-1.0.0.tar.gz
#        tar -xzf trexio-1.0.0.tar.gz
#        cd trexio-1.0.0/
#        ./configure FC=gfortran CC=gcc
#        make all
#        make check
#        sudo make install
#        sudo cp include/* /usr/local/include/

    - name: Compile the CHAMP code with INTEL
      if: matrix.toolchain == 'intel'
      run: |
        source /software/intel/oneapi/setvars.sh
        module load hdf5/1.12.1-intel
        module load trexio/2.0.0-intel
        which mpiifort
        MPIRUN=`which mpirun`
        echo "mpirun used is " $MPIRUN
        /software/cmake-3.22.1/bin/cmake --version
        /software/cmake-3.22.1/bin/cmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpiifort -DCMAKE_BUILD_TYPE=DEBUG
        /software/cmake-3.22.1/bin/cmake --build build -- -j2

    - name: Compile with GNU
      if: matrix.toolchain == 'gnu'
      run: |
        which mpif90
        MPIRUN=`which mpirun`
        echo "mpirun used is " $MPIRUN
        /software/cmake-3.22.1/bin/cmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpif90 -DCMAKE_BUILD_TYPE=DEBUG
        /software/cmake-3.22.1/bin/cmake --build build -- -j2

    - name: "Run all short tests"
      if: github.event_name != 'workflow_dispatch'
      run: |
        cd build
        ctest -V -L short

    - name: "Run tests with tag: ${{ github.event.inputs.tags }}"
      if: github.event_name == 'workflow_dispatch'
      run: |
        cd build
        ctest -V -L ${{ github.event.inputs.tags }}

#    - name: "Zip the test reults"
#      run: |
#        echo "Compressing the test results from workflow"
#        cd tests/
#        tar -czvf workflow_artifacts.tar.gz CI_test/

#- name: Upload calculation result artifacts
#      uses: actions/upload-artifact@v2
#      with:
#        name: results-workflow-actions
#        path: tests/workflow_artifacts.tar.gz
#        retention-days: 2



