#!/bin/csh  
# extract input variable documentation strings 
# and input keyword documentation strings
# from source files
# $Revision: 1.3 $
#
# options
# defaults
set optdone = 0
set longform = 0
set ascii = 1
set tex = 0
set var = 0
set keys = 0

# section type in latex output
set section = 'subsubsection'
# additional words in tex output
set noisy = 0

while($# && ( ! $optdone))
 if( "$1" !~ -*) then
   set optdone = 1
 else
   switch( $1 )
    case --long:
    case -l:
        set longform = 1
        breaksw
    case --short:
    case -s:
        set longform = 0
        breaksw
    case --ascii :
    case -a:
        set longform = 1
        set tex = 0
        set ascii = 1
        breaksw
    case --tex :
    case -t:
        set longform = 1
        set tex = 1
        set ascii = 0
        breaksw
    case --noisy :
        set noisy = 1
        breaksw
    case --subsection :
        set section = 'subsection'
        breaksw
    case --variables :
    case -v:
        set var = 1
        breaksw
    case --keywords :
    case -k:
        set keys = 1
        breaksw
    case --help:
    case -h:
        goto usage
        breaksw
   default:  
        set errmsg = "unknown option $1;  try $0:t --help"
        goto error
   endsw
   shift
 endif
end

#if( ! $# ) then
# goto usage 
#endif

set files = ""
set fdef = 0
while( $# )
 set files = "$files $1"
 set fdef = 1
 shift
end 

if( ! $fdef ) then
 set files = "*.F"
endif

#echo "files:  $files"

set datestr = `date`


gawk -f - $files <<EOF
BEGIN{ rn=""; search_doc=0;  nvar=0; nkey=0; search_keydoc=0; }
#eat blank lines
NF == 0{next;}
//{line=tolower(\$0);}

#keyword docu
search_keydoc { 
    search_keydoc=0;
    if(\$0  ~ /^CKEYDOC/){
      has_keydoc=1;
      in_keydoc=1;
    } else {
      has_keydoc=0;
       in_keydoc=0;
   }
   kw[nkey,"doc"]=0;
}
in_keydoc {  
  if(\$0  !~ /^CKEYDOC/){
    in_keydoc=0;
#    printf("\n");
  } else {
    kdoclne=\$0;
    sub(/CKEYDOC/,"",kdoclne);
#    printf("%s\n",kdoclne);
     i=++kw[nkey,"doc"];
     kw[nkey,"doc",i]=kdoclne;
 }
}

# keyword defs
/^C\\\$INPUT/ {  
    nkey++;
    kw[nkey,"keyword"]=\$2;
    kw[nkey,"file"]=FILENAME;
    kw[nkey,"line"]=FNR;
    kw[nkey,"sr"]=rn;
    kw[nkey,"nargs"]=NF-2;
    for(i=3;i<=NF;i++){
      kw[nkey,"arg",i-2]=\$i;
    }
    search_keydoc=1;
}

# name of current routine
line ~ /^      [ ]*subroutine/{
    tmp = \$2;
    ix = index(tmp,"(");
    if( ix ){
	tmp = substr( tmp,1,ix-1);
    }
    rn = tmp; 
#    print FILENAME,FNR,rn;
}
line ~ /^      [ ]*logical[ ]*function/{
    tmp = \$3;
    ix = index(tmp,"(");
    if( ix ){
	tmp = substr( tmp,1,ix-1);
    }
    rn = tmp; 
#    print FILENAME,FNR,rn;
}
line ~ /^      [ ]*integer[ ]*function/{
    tmp = \$3;
    ix = index(tmp,"(");
    if( ix ){
	tmp = substr( tmp,1,ix-1);
    }
    rn = tmp; 
#    print FILENAME,FNR,rn;
}
line ~ /^      [ ]*double[ ]*precision[ ]*function/{
    tmp = \$4;
    ix = index(tmp,"(");
    if( ix ){
	tmp = substr( tmp,1,ix-1);
    }
    rn = tmp; 
#    print FILENAME,FNR,rn;
}
# get docu
search_doc {
    search_doc=0;
    if(\$0  ~ /^CVARDOC/){
      has_doc=1;
      in_doc=1;
    } else {
      has_doc=0;
       in_doc=0;
   }
   vr[nvar,"doc"]=0;
}
in_doc {  
  if(\$0  !~ /^CVARDOC/){
    in_doc=0;
#    printf("\n");
  } else {
    doclne=\$0;
    sub(/CVARDOC/,"",doclne);
#    printf("%s\n",doclne);
     i=++vr[nvar,"doc"];
     vr[nvar,"doc",i]=doclne;
 }
}
# call to a get-variable routine 
   (line ~ /^      [\t ]*call[ ]*p2gt[ifa]d[ ]*\(/) {
#    printf("%s:%d: [%s]  \n",  FILENAME,FNR,rn);
    ix1 = index(\$0,"(") + 1;
    l2 = substr(\$0,ix1);
    ix2 = index(l2,")") - 1;
    l3 = substr(l2,1,ix2);
#    printf("line: [%s]\n\n",line);
#    printf("sub1: [%s]\n\n",l2);
#    printf("sub2: [%s]\n\n",l3);
    n = split(l3,args,",");
#    printf("split : %d\n",n);
    if(n!=4){
      print "WARNING: wrong number of arguments to p2gt..." > /dev/stderr;
      printf("line: [%s]\n\n",line) > /dev/stderr;
      printf("%s:%d: [%s]  \n",  FILENAME,FNR,rn) > /dev/stderr;
      print "line ignored" > /dev/stderr;
      next;
    }
#    for(i=1;i<=n;i++){
#     printf("arg %d =[%s]\n",i,args[i]);
#    }
     nvar++;
     tmpn = substr(args[1],2,length(args[1])-2);
     args[1] = tmpn;
# multiple occurrences
     i=++vcount[args[1]];
     vref[args[1],i]=nvar;
# names of the form 'group:name'
      n0=split(args[1],nsub,":");
     if(n0==2){
       gname=nsub[1];
     } else {
       gname="GLOBAL";
     }
     new_entry=1;
     if(gcount[gname] > 0){
      for(k=1; k<=gcount[gname]; k++){
        if(gref[gname,k]==args[1]){
           new_entry=0;
        }
      }
     }
     if(new_entry){
       i = ++gcount[gname];
       gref[gname,i]=args[1];
     }
     vr[nvar,"name"]=args[1];
     vr[nvar,"file"]=FILENAME;
     vr[nvar,"lne"]=FNR;
     vr[nvar,"sr"]=rn;
     vr[nvar,"fvar"]=args[2];
     vr[nvar,"default"]=args[3];
# next line could be the doc-string
    has_doc = 0;
    search_doc=1;
    in_doc=0;
   next; 
}
END{ 
# doc of keywords
  if($keys){
   if($ascii){
     keywordlist();
   }
   if($tex){
     tex_keywordlist();
   }
}

# doc of variables
   if($var){ 
     if($ascii){
       if($longform){
         out_ascii_long();
       } else {
         out_ascii_short();
      }
     }
     if($tex){
       if($longform){
         out_tex_long();
       } else {
         print "no short form of tex-output";
      }
  }
} 
}
#function  out_ascii_long(){
# for(i=1; i<= nvar; i++){
#  printf("Variable %s\n",vr[i,"name"]);
#  printf("   Location %s : %d , subroutine %s \n",vr[i,"file"],
#         vr[i,"lne"],vr[i,"sr"]);
#  printf("   Fortran Variable %s, Default value %s\n",vr[i,"fvar"],vr[i,"default"]);
#  if(vr[i,"doc"]){
#   printf("Documentation: \n");
#   for(j=1;j<=vr[i,"doc"];j++){
#    printf(" %s \n",vr[i,"doc",j]);
#   }
#  } else {
#    printf("No documentation. \n");
# }
# printf("\n");
#}
#}

#function  out_ascii_short(){
# for(i=1; i<= nvar; i++){
#  printf("%s\n",vr[i,"name"]);
#  if(vr[i,"doc"]){
#   for(j=1;j<=vr[i,"doc"];j++){
#    printf(" %s \n",vr[i,"doc",j]);
#   }
# }
#  printf("\n");
# }
#}

function  out_ascii_short(){
  print "*** short output ***";
  for(gn in gcount){
    printf("Group %s\n", gn);
    for(k=1; k<=gcount[gn]; k++){
      vn=gref[gn,k];
      printf("Variable %s \n",vn);
      for(i=1;i<=vcount[vn];i++){
       j=vref[vn,i];
       if(vr[j,"doc"]){
        for(l=1;l<=vr[j,"doc"];l++){
          printf(" %s \n",vr[j,"doc",l]);
        }
       }
      }
     }
   }
}

function  out_ascii_long(){
  print "*** long output ***";
  for(gn in gcount){
    printf("** Group %s\n", gn);
    for(k=1; k<=gcount[gn]; k++){
      vn=gref[gn,k];
      printf("Variable %s \n",vn);
      for(i=1;i<=vcount[vn];i++){
       j=vref[vn,i];
       printf("   Location %s : %d , subroutine %s \n",vr[j,"file"],
          vr[j,"lne"],vr[j,"sr"]);
       printf("   Fortran Variable %s, Default value %s\n",vr[j,"fvar"],vr[j,"default"]);
       printf("   Documentation:\n");
       if(vr[j,"doc"]){
        for(l=1;l<=vr[j,"doc"];l++){
          printf(" %s \n",vr[j,"doc",l]);
        }
       } else {
        printf("No documentation\n");
       }
      }
     }
    printf("\n");
   }
}

function keywordlist(){
 print "--- List of Keywords ---";
 for(i=1;i<=nkey;i++){
   printf("Keyword %s\n",kw[i,"keyword"]);
   printf("Location: %s %d subroutine %s\n",kw[i,"file"],kw[i,"line"], kw[i,"sr"]);
   if(kw[i,"nargs"]){
    printf("Arguments : ");
    for(j=1;j<=kw[i,"nargs"];j++){
     printf(" %s ",kw[i,"arg",j]);
    }
    printf("\n");
  } else {
    printf("No Arguments\n");
  }
  if(kw[i,"doc"]){
   printf("Documentation : ");
   for(j=1;j<=kw[i,"doc"];j++){    
    printf("%s \n",kw[i,"doc",j]);
   }
  } else {
     printf("No Documentation.\n");
  }
 printf("\n");
}
}

#function  out_tex_long(){
# printf("%% GENERATED WITH VARDOC,  DO NOT EDIT!\n");
# bksl="\\\";
# tel=bksl bksl;
# bf=bksl "bf"
# tucsr=bksl "symbol{95}";
# printf("{\\\small last update  $datestr}%s \n\n",tel);
#
# for(gn in gcount){
#   for(k0=1; k0<=gcount[gn]; k0++){
#    tmp=gref[gn,k0];
#   tmp=k
# gsub(/'/,"",tmp);
#  gsub(/_/,tucsr,tmp);
#  printf("\n\\\samepage \\\noindent Variable { \\\bf \\\tt  %s } %s \n",tmp,tel);
#  for(i0=1; i0<=vcount[k]; i0++){
#    i=vref[k,i0];
#    a=vr[i,"file"];
#    b=vr[i,"sr"];
#    gsub(/_/,tucsr,a);
#    gsub(/_/,tucsr,b);
#    printf("Location {\\\tt %s : %d } , subroutine {\\\tt %s } %s\n",a,
#         vr[i,"lne"],b,tel);
#    a = vr[i,"fvar"];
#    b = vr[i,"default"];
#    gsub(/_/,tucsr,a);
#    gsub(/_/,tucsr,b);
#    printf("Fortran Variable {\\\tt %s}, Default value {\\\tt %s} %s\n",a,b,tel);
#    if(vr[i,"doc"]){
#     printf("{\\\underline{ Documentation:} }%s\n",tel);
#    for(j=1;j<=vr[i,"doc"];j++){
#     tmp=vr[i,"doc",j];
#     gsub(/_/,tucsr,tmp);
#     if(j<vr[i,"doc"]){
#     printf(" %s \n",tmp);
#    } else {
#      printf(" %s %s\n",tmp,tel);
#   }
#   }
#  } else {
#    printf("{\\\sl No documentation.} %s \n",tel);
#  }
# }
#  printf("\n");
# }
#}
#}


function tex_keywordlist(){
 printf("%% GENERATED WITH VARDOC,  DO NOT EDIT!\n");
  bksl="\\\";
  tel=bksl bksl; tucsr=bksl "symbol{95}";
  printf("{\\\small last update  $datestr}%s \n\n",tel);
#
 for(i=1;i<=nkey;i++){
   tmp=kw[i,"keyword"];
   gsub(/_/,tucsr,tmp);
   printf("\n\\\samepage \\\noindent Keyword { \\\bf \\\tt  %s } %s \n",tmp,tel);
   a=kw[i,"file"];
   b=kw[i,"sr"];
   gsub(/_/,tucsr,a);
   gsub(/_/,tucsr,b);
   printf("{\\\small Location {\\\tt %s : %d } , subroutine {\\\tt %s }} %s\n",a,
          kw[i,"line"],b,tel);
   if(kw[i,"nargs"]){
    printf("{\\\small Arguments :{\\\tt ");
    for(j=1;j<=kw[i,"nargs"];j++){
	tmp=kw[i,"arg",j];
	gsub(/_/,tucsr,tmp);
	printf(" %s ",tmp);
    }
    printf("}}%s\n",tel);
  } else {
    if($noisy) {printf("{ \\\sl No Arguments}%s\n",tel);}
  }
  if(kw[i,"doc"]){
  if($noisy){printf("{\\\underline{ Documentation:} }%s\n",tel);}
   for(j=1;j<=kw[i,"doc"];j++){    
    tmp=kw[i,"doc",j];
    gsub(/_/,tucsr,tmp);
    if(j<kw[i,"doc"]){
      printf(" %s \n",tmp);
    } else {
      printf(" %s %s\n",tmp,tel);
    }
   }
  } else {
     if($noisy){printf("{\\\sl No documentation.} %s \n",tel);}
  }
 printf("\n");
}
}


function  out_tex_long(){
  printf("%% GENERATED WITH VARDOC,  DO NOT EDIT!\n");
  bksl="\\\";
  tel=bksl bksl; tucsr=bksl "symbol{95}";
  printf("{\\\small last update  $datestr}%s \n\n",tel);
#
  for(gn in gcount){
    tmp=gn;
    gsub(/_/,tucsr,tmp);
    printf("\\\" "$section{Group %s}\n", tmp);
    for(k=1; k<=gcount[gn]; k++){
      vn=gref[gn,k];
      tmp=vn;
      gsub(/_/,tucsr,tmp);
      printf("\n\\\samepage \\\noindent Variable { \\\bf \\\tt  %s } %s \n",tmp,tel);
      for(i=1;i<=vcount[vn];i++){
       j=vref[vn,i];
       if(vr[j,"doc"]){
        if($noisy){printf("{\\\underline{ Documentation:} }%s\n",tel);}
        for(l=1;l<=vr[j,"doc"];l++){
          tmp=vr[j,"doc",l];
          gsub(/_/,tucsr,tmp);
          if(l<vr[j,"doc"]){
           printf(" %s \n",tmp);
          } else {
           printf(" %s %s\n",tmp,tel);
          }
        }
       } else {
        if($noisy){printf("{\\\sl No documentation.} %s \n",tel);}
       }
       a=vr[j,"file"];
       b=vr[j,"sr"];
       gsub(/_/,tucsr,a);
       gsub(/_/,tucsr,b);
       printf("{\\\small Location {\\\tt %s : %d } , subroutine {\\\tt %s }} %s\n",a,
          vr[j,"lne"],b,tel);
       a = vr[j,"fvar"];
       b = vr[j,"default"];
       gsub(/_/,tucsr,a);
       gsub(/_/,tucsr,b);
       printf("{\\\small Fortran Variable {\\\tt %s}, Default value {\\\tt %s}} %s\n",a,b,tel);
      }
     }
    printf("\n");
   }
}


EOF
exit 0

usage:
cat<<EOF

  usage: $0:t [OPTIONS] [FILES]

  Tool to extract input documentation from source files.
  Options:
    what to extract
    --variables, -v : documentation of variables
    --keywords, -k  : documentation of keywords
   output format
    --short, -s  : shorter output
    --long,  -l  : longer output
    --ascii, -a  : ascii output
    --tex,   -t  : tex output 
    --noisy      : additional words (e.g. 'No Documentation') in tex output
    --subsection : subsection (instead of section) in latex
   etc
    --help,  -h  : this help

  If no files are specified, all *.F files in the
  current directory are used.  

EOF
  exit 0

error:
  echo $errmsg
  exit 1
